/*******************************************************************************
 * Copyright 2010-2012 CEFRIEL Ð Politecnico di Milano
 *  
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *  
 *        http://www.apache.org/licenses/LICENSE-2.0
 *  
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 ******************************************************************************/
/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package eu.indenica.iret.provider;

import eu.indenica.iret.util.IretAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IretItemProviderAdapterFactory extends IretAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IretItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.Agent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentItemProvider agentItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.Agent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentAdapter() {
		if (agentItemProvider == null) {
			agentItemProvider = new AgentItemProvider(this);
		}

		return agentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.HumanAgent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HumanAgentItemProvider humanAgentItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.HumanAgent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHumanAgentAdapter() {
		if (humanAgentItemProvider == null) {
			humanAgentItemProvider = new HumanAgentItemProvider(this);
		}

		return humanAgentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.AutomatedAgent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AutomatedAgentItemProvider automatedAgentItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.AutomatedAgent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAutomatedAgentAdapter() {
		if (automatedAgentItemProvider == null) {
			automatedAgentItemProvider = new AutomatedAgentItemProvider(this);
		}

		return automatedAgentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.BehaviouralGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviouralGoalItemProvider behaviouralGoalItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.BehaviouralGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviouralGoalAdapter() {
		if (behaviouralGoalItemProvider == null) {
			behaviouralGoalItemProvider = new BehaviouralGoalItemProvider(this);
		}

		return behaviouralGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.AdaptationGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptationGoalItemProvider adaptationGoalItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.AdaptationGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptationGoalAdapter() {
		if (adaptationGoalItemProvider == null) {
			adaptationGoalItemProvider = new AdaptationGoalItemProvider(this);
		}

		return adaptationGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.RefinementLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefinementLinkItemProvider refinementLinkItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.RefinementLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefinementLinkAdapter() {
		if (refinementLinkItemProvider == null) {
			refinementLinkItemProvider = new RefinementLinkItemProvider(this);
		}

		return refinementLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.ANDRefinementLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ANDRefinementLinkItemProvider andRefinementLinkItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.ANDRefinementLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createANDRefinementLinkAdapter() {
		if (andRefinementLinkItemProvider == null) {
			andRefinementLinkItemProvider = new ANDRefinementLinkItemProvider(this);
		}

		return andRefinementLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.ORRefinementLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORRefinementLinkItemProvider orRefinementLinkItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.ORRefinementLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createORRefinementLinkAdapter() {
		if (orRefinementLinkItemProvider == null) {
			orRefinementLinkItemProvider = new ORRefinementLinkItemProvider(this);
		}

		return orRefinementLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.ContributionLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContributionLinkItemProvider contributionLinkItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.ContributionLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContributionLinkAdapter() {
		if (contributionLinkItemProvider == null) {
			contributionLinkItemProvider = new ContributionLinkItemProvider(this);
		}

		return contributionLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.Reference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceItemProvider referenceItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.Reference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceAdapter() {
		if (referenceItemProvider == null) {
			referenceItemProvider = new ReferenceItemProvider(this);
		}

		return referenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.FormalDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormalDefinitionItemProvider formalDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.FormalDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormalDefinitionAdapter() {
		if (formalDefinitionItemProvider == null) {
			formalDefinitionItemProvider = new FormalDefinitionItemProvider(this);
		}

		return formalDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.PrimitiveAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveAttributeItemProvider primitiveAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.PrimitiveAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveAttributeAdapter() {
		if (primitiveAttributeItemProvider == null) {
			primitiveAttributeItemProvider = new PrimitiveAttributeItemProvider(this);
		}

		return primitiveAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.EntityAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityAttributeItemProvider entityAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.EntityAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAttributeAdapter() {
		if (entityAttributeItemProvider == null) {
			entityAttributeItemProvider = new EntityAttributeItemProvider(this);
		}

		return entityAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.Variability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariabilityItemProvider variabilityItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.Variability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariabilityAdapter() {
		if (variabilityItemProvider == null) {
			variabilityItemProvider = new VariabilityItemProvider(this);
		}

		return variabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.GoalDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalDiagramItemProvider goalDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.GoalDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalDiagramAdapter() {
		if (goalDiagramItemProvider == null) {
			goalDiagramItemProvider = new GoalDiagramItemProvider(this);
		}

		return goalDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link eu.indenica.iret.IreneModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IreneModelItemProvider ireneModelItemProvider;

	/**
	 * This creates an adapter for a {@link eu.indenica.iret.IreneModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIreneModelAdapter() {
		if (ireneModelItemProvider == null) {
			ireneModelItemProvider = new IreneModelItemProvider(this);
		}

		return ireneModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (agentItemProvider != null) agentItemProvider.dispose();
		if (humanAgentItemProvider != null) humanAgentItemProvider.dispose();
		if (automatedAgentItemProvider != null) automatedAgentItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (behaviouralGoalItemProvider != null) behaviouralGoalItemProvider.dispose();
		if (adaptationGoalItemProvider != null) adaptationGoalItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (refinementLinkItemProvider != null) refinementLinkItemProvider.dispose();
		if (andRefinementLinkItemProvider != null) andRefinementLinkItemProvider.dispose();
		if (orRefinementLinkItemProvider != null) orRefinementLinkItemProvider.dispose();
		if (contributionLinkItemProvider != null) contributionLinkItemProvider.dispose();
		if (referenceItemProvider != null) referenceItemProvider.dispose();
		if (formalDefinitionItemProvider != null) formalDefinitionItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (primitiveAttributeItemProvider != null) primitiveAttributeItemProvider.dispose();
		if (entityAttributeItemProvider != null) entityAttributeItemProvider.dispose();
		if (variabilityItemProvider != null) variabilityItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (goalDiagramItemProvider != null) goalDiagramItemProvider.dispose();
		if (ireneModelItemProvider != null) ireneModelItemProvider.dispose();
	}

}
